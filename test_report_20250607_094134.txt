================================================================================
RPAL INTERPRETER TEST REPORT
================================================================================
Generated on: 2025-06-07 09:41:34
Total Tests Run: 111
Success Rate: 100.0%

SUMMARY
----------------------------------------
[PASS] Passed: 111
[FAIL] Failed: 0
[ERR]  Errors: 0

PASSED TESTS
----------------------------------------
[PASS] let_expr
  Description: Simple let expression
  Code: let x = 5 in x;
  Expected: 5
  Actual: 5

[PASS] where_expr
  Description: Simple where expression
  Code: x where x = 6;
  Expected: 6
  Actual: 6

[PASS] print_tuple
  Description: PDF Sample 1 - Print tuple with square
  Code: let X=3 in Print(X,X**2);
  Expected: (3, 9)
  Actual: (3, 9)

[PASS] abs_function
  Description: PDF Sample 2 - Absolute value function
  Code: let Abs N = N ls 0 -> -N | N in Print(Abs (-3));
  Expected: 3
  Actual: 3

[PASS] aug_expr
  Description: Tuple augmentation
  Code: Print (((1, 2) aug 3) aug 4);
  Expected: (1, 2, 3, 4)
  Actual: (1, 2, 3, 4)

[PASS] tuple_expr
  Description: Simple tuple construction
  Code: Print ((1, 2, 3));
  Expected: (1, 2, 3)
  Actual: (1, 2, 3)

[PASS] tuple_selection
  Description: PDF Example - Tuple element selection
  Code: let T = (1, (2,3), ('a', 4)) in Print (T 2);
  Expected: (2, 3)
  Actual: (2, 3)

[PASS] tuple_selection_2
  Description: PDF Example - Multiple tuple selections
  Code: let T=('a','b',true,3) in Print(T 3,T 2);
  Expected: (true, b)
  Actual: (true, b)

[PASS] function_form
  Description: Simple function definition and application
  Code: let f x = x + 1 in f(10);
  Expected: 11
  Actual: 11

[PASS] lambda_simple
  Description: Simple lambda function
  Code: (fn x . x * 2)(4);
  Expected: 8
  Actual: 8

[PASS] lambda_nested
  Description: Nested lambda functions
  Code: (fn x . fn y . x + y)(2)(3);
  Expected: 5
  Actual: 5

[PASS] lambda_with_tuple_param
  Description: Lambda with tuple parameter
  Code: (fn (a,b) . a * b)((2,3));
  Expected: 6
  Actual: 6

[PASS] inc_function
  Description: PDF Example - Increment function
  Code: let Inc x = x + 1 in Print (Inc 7);
  Expected: 8
  Actual: 8

[PASS] inc_lambda
  Description: PDF Example - Increment as lambda
  Code: let Inc = fn x. x + 1 in Print (Inc 7);
  Expected: 8
  Actual: 8

[PASS] function_parameter
  Description: PDF Example - Function as parameter
  Code: let f g = g 3 in let h x = x + 1 in Print(f h);
  Expected: 4
  Actual: 4

[PASS] function_return
  Description: PDF Example - Function returning function
  Code: let f x = fn y. x+y in Print (f 3 2);
  Expected: 5
  Actual: 5

[PASS] function_conditional
  Description: PDF Example - Function selection using conditional
  Code: let B=true in let f = B -> (fn y.y+1) | (fn y.y+2) in Print (f 3);
  Expected: 4
  Actual: 4

[PASS] function_in_tuple
  Description: PDF Example - Functions stored in tuple
  Code: let T=((fn x.x+1),(fn x.x+2)) in Print (T 1 3, T 2 3);
  Expected: (4, 5)
  Actual: (4, 5)

[PASS] nary_function
  Description: PDF Example - N-ary function using tuples
  Code: let Add (x,y) = x+y in Print (Add (3,4));
  Expected: 7
  Actual: 7

[PASS] conditional_expr
  Description: Simple conditional expression
  Code: true -> 1 | 0;
  Expected: 1
  Actual: 1

[PASS] nested_conditions
  Description: Nested conditional expressions
  Code: x eq 0 -> 1 | x eq 1 -> 2 | 3 where x = 2;
  Expected: 3
  Actual: 3

[PASS] conditional_abs
  Description: Conditional absolute value
  Code: (fn n. n < 0 -> -n | n )( -3 );
  Expected: 3
  Actual: 3

[PASS] neg_expr
  Description: Negation expression
  Code: -5;
  Expected: -5
  Actual: -5

[PASS] not_expr
  Description: Logical not expression
  Code: not false;
  Expected: true
  Actual: true

[PASS] logical_and_or
  Description: Logical AND and OR operations
  Code: (true & false) or true;
  Expected: true
  Actual: true

[PASS] within_function
  Description: PDF Example - Function definition within scope
  Code: let c=3 within f x = x + c in Print(f 3);
  Expected: 6
  Actual: 6

[PASS] rec_expr
  Description: Recursive factorial function
  Code: let rec fact n = n eq 0 -> 1 | n * fact(n - 1) in fact(3);
  Expected: 6
  Actual: 6

[PASS] deep_recursion
  Description: Recursive Fibonacci function
  Code: let rec fib n = n eq 0 -> 0 | n eq 1 -> 1 | fib(n-1) + fib(n-2) in fib(4);
  Expected: 3
  Actual: 3

[PASS] pdf_factorial
  Description: PDF Example - Factorial function
  Code: let rec Fact n = n eq 1 -> 1 | n * Fact (n-1) in Print (Fact 3);
  Expected: 6
  Actual: 6

[PASS] string_length
  Description: PDF Example - String length function
  Code: let rec length S = S eq '' -> 0 | 1 + length (Stern S) in Print ( length('1,2,3'), length (''), length('abc') );
  Expected: (5, 0, 3)
  Actual: (5, 0, 3)

[PASS] perfect_square
  Description: PDF Example - Perfect square checker
  Code: let Is_perfect_Square N = Has_sqrt_ge (N,1) where rec Has_sqrt_ge (N,R) = R**2 gr N -> false | R**2 eq N -> true | Has_sqrt_ge (N,R+1) in Print (Is_perfect_Square 4, Is_perfect_Square 64, Is_perfect_Square 3);
  Expected: (true, true, false)
  Actual: (true, true, false)

[PASS] comparison_exprs
  Description: Equality comparison
  Code: 1 eq 1;
  Expected: true
  Actual: true

[PASS] comparison_ne
  Description: Not equal comparison
  Code: 1 ne 2;
  Expected: true
  Actual: true

[PASS] comparison_gr
  Description: Greater than comparison
  Code: 3 gr 2;
  Expected: true
  Actual: true

[PASS] builtin_isinteger
  Description: Integer type check
  Code: Isinteger(5);
  Expected: true
  Actual: true

[PASS] builtin_isstring
  Description: String type check
  Code: Isstring('abc');
  Expected: true
  Actual: true

[PASS] builtin_istuple
  Description: Tuple type check
  Code: Istuple((1,2));
  Expected: true
  Actual: true

[PASS] builtin_istruthvalue
  Description: Truth value type check
  Code: Istruthvalue(true);
  Expected: true
  Actual: true

[PASS] builtin_isdummy
  Description: Dummy type check
  Code: Isdummy(dummy);
  Expected: true
  Actual: true

[PASS] builtin_isfunction
  Description: Function type check
  Code: Isfunction(fn x . x);
  Expected: true
  Actual: true

[PASS] combined_expr
  Description: Complex nested function application
  Code: Print((fn x. 1 + (fn w. -w) x)((fn z. 2 * z) 7));
  Expected: -13
  Actual: -13

[PASS] complex_tuple_aug
  Description: Complex tuple augmentation
  Code: ((1, 2) aug 3) aug 4;
  Expected: [1, 2, 3, 4]
  Actual: [1, 2, 3, 4]

[PASS] nested_let
  Description: Nested let expressions
  Code: let x = 2 in let y = x + 3 in y * 2;
  Expected: 10
  Actual: 10

[PASS] multi_param_fn
  Description: Multi-parameter function
  Code: let add x y = x + y in add 3 4;
  Expected: 7
  Actual: 7

[PASS] use_of_dummy
  Description: Use of dummy value
  Code: Print(dummy);
  Expected: dummy
  Actual: dummy

[PASS] compose_functions
  Description: Function composition
  Code: let compose f g x = f(g(x)) in compose (fn y . y + 1) (fn z . z * 2) 5;
  Expected: 11
  Actual: 11

[PASS] arithmetic_precedence
  Description: Arithmetic precedence test
  Code: (fn x . x - 1) 4 * 2;
  Expected: 6
  Actual: 6

[PASS] bracket_functions
  Description: Function with tuple parameter using brackets
  Code: (fn (x, y).x + y)(5, 6);
  Expected: 11
  Actual: 11

[PASS] nested_scopes
  Description: PDF Example - Nested scopes
  Code: let X = 3 in let Sqr X = X**2 in Print (X, Sqr X, X * Sqr X, Sqr X ** 2);
  Expected: (3, 9, 27, 81)
  Actual: (3, 9, 27, 81)

[PASS] simultaneous_def
  Description: PDF Example - Simultaneous definitions
  Code: let X=3 and Y=5 in Print(X+Y);
  Expected: 8
  Actual: 8

[PASS] pdf_tuple_example
  Description: PDF Example - Nested tuples
  Code: let Bdate = ('Jan', 01, '2000') in let Student = ('John','Doe', Bdate, 19) in Print (Student);
  Expected: (John, Doe, (Jan, 1, 2000), 19)
  Actual: (John, Doe, (Jan, 1, 2000), 19)

[PASS] pdf_array_example
  Description: PDF Example - Array as tuple
  Code: let I=2 in let A=(1,I,I**2,I**3,I**4,I**5) in Print (A);
  Expected: (1, 2, 4, 8, 16, 32)
  Actual: (1, 2, 4, 8, 16, 32)

[PASS] pdf_multidim_array
  Description: PDF Example - Multi-dimensional array
  Code: let A=(1,2) and B=(3,4) and C=(5,6) in let T=(A,B,C) in Print(T);
  Expected: ((1, 2), (3, 4), (5, 6))
  Actual: ((1, 2), (3, 4), (5, 6))

[PASS] pdf_triangular_array
  Description: PDF Example - Triangular array
  Code: let A = nil aug 1 and B=(2,3) and C=(4,5,6) in let T=(A,B,C) in Print(T);
  Expected: ((1), (2, 3), (4, 5, 6))
  Actual: ((1), (2, 3), (4, 5, 6))

[PASS] tuple_extension
  Description: PDF Example - Tuple extension
  Code: let T = (2,3) in let A = T aug 4 in Print (A);
  Expected: (2, 3, 4)
  Actual: (2, 3, 4)

[PASS] at_operator
  Description: PDF Example - @ operator for infix use
  Code: let Add x y = x + y in Print (2 @Add 3 @Add 4);
  Expected: 9
  Actual: 9

[PASS] sum_list
  Description: PDF Example - Sum of list elements
  Code: let Sum_list L = Partial_sum (L, Order L) where rec Partial_sum (L,N) = N eq 0 -> 0 | L N + Partial_sum(L,N-1) in Print ( Sum_list (2,3,4,5) );
  Expected: 14
  Actual: 14

[PASS] vector_sum
  Description: PDF Example - Vector addition
  Code: let Vector_sum(A,B) = Partial_sum (A,B,Order A) where rec Partial_sum (A,B,N) = N eq 0 -> nil | ( Partial_sum(A,B,N-1) aug (A N + B N)) in Print (Vector_sum((1,2,3),(4,5,6)));
  Expected: (5, 7, 9)
  Actual: (5, 7, 9)

[PASS] string_greeting
  Description: PDF Example - String greeting
  Code: let Name = 'Dolly' in Print ('Hello', Name);
  Expected: (Hello, Dolly)
  Actual: (Hello, Dolly)

[PASS] division_by_zero
  Description: PDF Example - Division by zero (PL order)
  Code: let f x y = x in Print(f 3 (1/0));
  Expected: ERROR
  Actual: ERROR: integer division or modulo by zero

[PASS] tuple_order
  Description: Tuple order operation
  Code: Print(Order (1,2,3,4));
  Expected: 4
  Actual: 4

[PASS] tuple_null
  Description: Tuple null check operation
  Code: Print(Null nil, Null (1,2));
  Expected: (true, false)
  Actual: (true, false)

[PASS] palindrome_1
  Description: Palindrome check operation
  Code: let remaining(N,d) = N - (N/d)*d
in let rec reverse(N,S) = N le 0 -> S | reverse(N/10, (S*10)+remaining(N,10))
in let Palindrome(N) = reverse(N,0) eq N -> 'Palindrome'|'Not a palindrome'
in Print(Palindrome(121))

  Expected: Palindrome
  Actual: Palindrome

[PASS] big_code
  Description: pdf_ex4
  Code: let rec Rev S =
  S eq '' -> ''
  | (Rev (Stern S)) @Conc (Stem S)
within
  Pairs (S1, S2) =
    not (Isstring S1 & Isstring S2)
    -> 'both args not strings'
    | P (Rev S1, Rev S2)
      where rec P (S1, S2) =
        S1 eq '' & S2 eq ''
        -> nil
        | (Stern S1 eq '' & Stern S2 ne '') or
          (Stern S1 ne '' & Stern S2 eq '')
        -> 'unequal length strings'
        | (P (Stern S1, Stern S2)
           aug ((Stem S1) @Conc (Stem S2)))
in Print (Pairs ('abc','def'))

  Expected: (ad, be, cf)
  Actual: (ad, be, cf)

[PASS] identity_function
  Description: Identity function
  Code: (fn x . x)(10);
  Expected: 10
  Actual: 10

[PASS] boolean_identity
  Description: Boolean identity function
  Code: (fn b . b)(true);
  Expected: true
  Actual: true

[PASS] tuple_in_tuple
  Description: Nested tuple declaration
  Code: let X = ((1, 2), (3, 4)) in Print(X);
  Expected: ((1, 2), (3, 4))
  Actual: ((1, 2), (3, 4))

[PASS] tuple_function_result
  Description: Function returning a tuple
  Code: let f x = (x, x+1) in Print (f 5);
  Expected: (5, 6)
  Actual: (5, 6)

[PASS] lambda_ignore_param
  Description: Lambda ignoring parameter
  Code: (fn x . 42)(999);
  Expected: 42
  Actual: 42

[PASS] tuple_selection_nested
  Description: Nested tuple selection
  Code: let T = ((1,2),3) in Print (T 1 2);
  Expected: 2
  Actual: 2

[PASS] function_applied_multiple_times
  Description: Function applied twice
  Code: let f x = x * 2 in f(f(3));
  Expected: 12
  Actual: 12

[PASS] print_string
  Description: Print simple string
  Code: Print('hello');
  Expected: hello
  Actual: hello

[PASS] string_concat_simulated
  Description: Simulated string concatenation via tuple
  Code: Print(('a','b','c'));
  Expected: (a, b, c)
  Actual: (a, b, c)

[PASS] string_concatenation
  Description: String concatenation using @Conc
  Code: Print('Hello' @Conc ' World');
  Expected: Hello World
  Actual: Hello World

[PASS] string_stem_stern
  Description: String Stem and Stern operations
  Code: Print(Stem 'Hello', Stern 'Hello');
  Expected: (H, ello)
  Actual: (H, ello)

[PASS] empty_string_operations
  Description: Stem and Stern on empty string
  Code: Print(Stem '', Stern '');
  Expected: (, )
  Actual: (, )

[PASS] string_comparison
  Description: String equality and inequality
  Code: Print('abc' eq 'abc', 'abc' ne 'def');
  Expected: (true, true)
  Actual: (true, true)

[PASS] power_operation
  Description: Power operation
  Code: Print(2**3, 3**2);
  Expected: (8, 9)
  Actual: (8, 9)

[PASS] division_integer
  Description: Integer division
  Code: Print(8/2, 9/2);
  Expected: (4, 4)
  Actual: (4, 4)

[PASS] complex_arithmetic
  Description: Complex arithmetic with precedence
  Code: Print((2+3)*4-1, 2**(3+1));
  Expected: (19, 16)
  Actual: (19, 16)

[PASS] all_comparisons
  Description: All comparison operators
  Code: Print(5 gr 3, 5 ge 5, 3 ls 5, 3 le 3);
  Expected: (true, true, true, true)
  Actual: (true, true, true, true)

[PASS] string_comparisons
  Description: String lexicographic comparisons
  Code: Print('abc' ls 'def', 'xyz' gr 'abc');
  Expected: (true, true)
  Actual: (true, true)

[PASS] empty_tuple
  Description: Empty tuple (nil)
  Code: Print(nil);
  Expected: nil
  Actual: nil

[PASS] single_element_tuple
  Description: Single element tuple creation
  Code: Print(nil aug 42);
  Expected: (42)
  Actual: (42)

[PASS] tuple_nested_access
  Description: Nested tuple element access
  Code: let T = ((1,2),(3,4)) in Print(T 1 2, T 2 1);
  Expected: (2, 3)
  Actual: (2, 3)

[PASS] tuple_order_operations
  Description: Order function on various tuples
  Code: Print(Order nil, Order (1,2), Order (1,2,3));
  Expected: (0, 2, 3)
  Actual: (0, 2, 3)

[PASS] curried_function
  Description: Curried function with three parameters
  Code: let add x y z = x + y + z in Print(add 1 2 3);
  Expected: 6
  Actual: 6

[PASS] partial_application
  Description: Partial function application
  Code: let add x y = x + y in let add5 = add 5 in Print(add5 3);
  Expected: 8
  Actual: 8

[PASS] function_with_conditional
  Description: Function with conditional logic
  Code: let max x y = x gr y -> x | y in Print(max 5 3, max 2 7);
  Expected: (5, 7)
  Actual: (5, 7)

[PASS] higher_order_function
  Description: Higher-order function application
  Code: let apply f x = f x in let double x = x * 2 in Print(apply double 5);
  Expected: 10
  Actual: 10

[PASS] lambda_closure
  Description: Lambda closure capturing outer variable
  Code: let x = 10 in (fn y . x + y)(5);
  Expected: 15
  Actual: 15

[PASS] lambda_returning_lambda
  Description: Lambda returning another lambda
  Code: (fn x . fn y . x * y)(3)(4);
  Expected: 12
  Actual: 12

[PASS] nested_conditionals
  Description: Nested conditional expressions for grading
  Code: let grade score = score ge 90 -> 'A' | score ge 80 -> 'B' | score ge 70 -> 'C' | 'F' in Print(grade 85);
  Expected: B
  Actual: B

[PASS] conditional_with_and_or
  Description: Conditional with logical AND
  Code: let valid age income = (age ge 18) & (income gr 30000) -> 'Approved' | 'Rejected' in Print(valid 25 35000);
  Expected: Approved
  Actual: Approved

[PASS] let_with_function_def
  Description: Let with function definition using another function
  Code: let square x = x * x in let cube x = x * square x in Print(cube 3);
  Expected: 27
  Actual: 27

[PASS] undefined_variable
  Description: Reference to undefined variable
  Code: Print(undefined_var);
  Expected: ERROR
  Actual: ERROR: Unbound identifier: undefined_var

[PASS] invalid_tuple_access
  Description: Invalid tuple index access
  Code: let t = (1,2) in Print(t 3);
  Expected: ERROR
  Actual: ERROR: Index 3 out of bounds for tuple [1, 2]

[PASS] type_mismatch
  Description: Type mismatch in arithmetic
  Code: Print(1 + 'hello');
  Expected: ERROR
  Actual: ERROR: invalid literal for int() with base 10: 'hello'

[PASS] builtin_print_multiple
  Description: Print function with multiple arguments
  Code: Print(1, 'hello', true, (1,2));
  Expected: (1, hello, true, (1, 2))
  Actual: (1, hello, true, (1, 2))

[PASS] builtin_conc_multiple
  Description: Multiple string concatenations
  Code: Print('a' @Conc 'b' @Conc 'c');
  Expected: abc
  Actual: abc

[PASS] function_returning_tuple
  Description: Function returning tuple
  Code: let coords x y = (x, y) in let point = coords 3 4 in Print(point);
  Expected: (3, 4)
  Actual: (3, 4)

[PASS] tuple_of_conditionals
  Description: Tuple containing conditional expressions
  Code: let results = (true -> 1 | 0, false -> 1 | 0) in Print(results);
  Expected: (1, 0)
  Actual: (1, 0)

[PASS] where_with_function
  Description: Where with function definition
  Code: f 5 where f x = x * x + 1;
  Expected: 26
  Actual: 26

[PASS] string_length_recursive
  Description: Recursive string length calculation
  Code: let rec length s = s eq '' -> 0 | 1 + length(Stern s) in Print(length 'hello');
  Expected: 5
  Actual: 5

[PASS] string_reverse
  Description: Recursive string reversal
  Code: let rec reverse s = s eq '' -> '' | reverse(Stern s) @Conc Stem s in Print(reverse 'hello');
  Expected: olleh
  Actual: olleh

[PASS] fibonacci_iterative
  Description: Iterative Fibonacci calculation
  Code: let fib n = fib_helper(n, 0, 1) where rec fib_helper(n, a, b) = n eq 0 -> a | fib_helper(n-1, b, a+b) in Print(fib 6);
  Expected: 8
  Actual: 8

[PASS] complex_nested_expression
  Description: Complex nested function application
  Code: let f = fn x . fn y . x + y in let g = fn h . fn z . h z in Print(g f 5 3);
  Expected: 8
  Actual: 8

[PASS] conditional_function_selection
  Description: Conditional function selection
  Code: let op = '+' in let result = op eq '+' -> (fn x y . x + y) | op eq '*' -> (fn x y . x * y) | (fn x y . 0) in Print(result 3 4);
  Expected: 7
  Actual: 7

[PASS] empty_function_body
  Description: Function returning dummy
  Code: let f x = dummy in Print(f 5);
  Expected: dummy
  Actual: dummy

[PASS] chained_function_calls
  Description: Chained function calls
  Code: let add1 x = x + 1 in Print(add1(add1(add1(5))));
  Expected: 8
  Actual: 8

[PASS] print and Print
  Description: print and Print calls
  Code: let rec  Fibonacci_Series(lower, upper, current, previous) = 
(current + previous) ls lower -> Fibonacci_Series (lower, upper, current + previous, current) |
    (current + previous) ls upper -> ((Fibonacci_Series (lower, upper, current + previous, current)), print(' '), print(current + previous)) | nil
in
let fib_range (start, end) = 
        start le 1 ->
            (Fibonacci_Series (start, end, 1, 0), print(' '), print(1), print(' '), print(0)) |
            Fibonacci_Series (start, end, 1, 0)			
in
fib_range (5, 75);
  Expected: [[[[[[[], ' ', 55], ' ', 34], ' ', 21], ' ', 13], ' ', 8], ' ', 5]
  Actual: [[[[[[[], ' ', 55], ' ', 34], ' ', 21], ' ', 13], ' ', 8], ' ', 5]

================================================================================
END OF REPORT
================================================================================
